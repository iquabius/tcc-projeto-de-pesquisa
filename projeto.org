#+OPTIONS: toc:nil
#+LaTeX_CLASS: abntex2
#+LATEX_HEADER: \usepackage{tex/unemat}
#+LATEX_HEADER: \usepackage{org-tex/pkg_config}
#+LATEX_HEADER: \usepackage{org-tex/proj_info}
#+LATEX_HEADER: \usepackage{org-tex/pdf_styles}


#+LATEX: \selectlanguage{brazil}
#+LATEX: \frenchspacing

#+LATEX: \imprimircapa
#+LATEX: \imprimirfolhaderosto

#+LATEX: \input{tex/siglas}

#+LATEX: \pdfbookmark[0]{\contentsname}{toc}
#+LATEX: {\center\tableofcontents*}
#+LATEX: \cleardoublepage

#+LATEX: \textual

#+LATEX: \chapter*{Projeto de Pesquisa}
#+LATEX: \markboth{Projeto de Pesquisa}{Projeto de Pesquisa}
#+LATEX: \addcontentsline{toc}{chapter}{Projeto de Pesquisa}


* Tema
  Programação Funcional Reativa (PFR).

* Delimitação
  Programação Funcional Reativa (PFR) aplicada à coordenação de eventos em
  Interfaces Gráficas do Usuário (GUIs)[fn:reactive].

* Problema
  O quê a Programação Funcional Reativa (PFR) tem a oferecer, e como ela se
  compara aos modelos baseados em /callbacks/ quanto ao nível de abstração
  fornecido para coordenação de eventos na programação de GUIs?

* Hipóteses
  O /Observer Pattern/ --- inerentemente orientado a objetos e /imperativo/ ---
  utiliza callbacks[fn:callbacks] como principal mecanismo de coordenação de
  eventos em GUIs. Porém a forma desconcertante com a qual /callbacks/ coordenam
  eventos faz com que o programa se torne difícil de compreender e, de modo
  geral, complexo e de manutenção laboriosa.

  PFR permite que aplicações interativas sejam programadas de forma
  /declarativa/ em um nível mais elevado[fn:abstracao] de abstração, com código
  fonte que expressa melhor a solução implementada. Como resultado, o programa
  se torna mais compreensível e, em geral, menos complexo e mais fácil de dar
  manutenção.

* Objetivos

** Objetivo Geral
   Demonstrar e analisar a PFR em comparação a modelos baseados em /callbacks/,
   quanto ao nível de abstração fornecido à coordenação de eventos na
   programação de GUIs.

** Objetivos Específicos
  - Demonstrar o modelo /declarativo/ da /Programação Funcional/, e o modelo
    tradicional /imperativo/, aplicados na manipulação de sequências (e.g.
    /arrays/, listas, mapas);
  - Demonstrar o modelo /declarativo/ da PFR, e o modelo tradicional
    /imperativo/ baseado /callbacks/, aplicados na coordenação de eventos em
    GUIs;
  - Analisar o modelo /declarativo/ em contraste com o /imperativo/ no que
    concerne o nível de abstração fornecido à manipulação de sequências, e à
    coordenação de eventos;


#+LATEX: \phantompart
#+LATEX: \postextual
#+LATEX: \bibliography{/home/iquabius/LaTeX/refs.bib}
#+LATEX: \phantompart
#+LATEX: \printindex


* Footnotes

[fn:abstracao] Em seu ensaio, \citeauthoronline{braithwaite2007} elucida:
  “\textelp{} quando o código se assemelha muito com a forma com a qual você
  explicaria sua solução pelo telefone, costuma-se dizer que ele é de ‘nível
  muito alto.’ (\citeyear{braithwaite2007}, tradução nossa)”.

[fn:callbacks] /Callbacks/ são funções registradas para tratar eventos ou computações
  assíncronas, e representão essêncialmente o mesmo conceito de /event
  handlers/, /event listeners/ ou /observers./

[fn:reactive] Para manter interação contínua com o ambiente externo, GUIs precisam
  reagir a vários eventos, como cliques do mouse ou pressionamento de teclas.
  Tais eventos são processados para executar uma tarefa correspondente, como
  atualizar o estado interno da aplicação ou exibir dados na tela. Devido a
  essas propriedades, uma GUI é considerada um sistema /reativo/ ou /orientado a
  eventos./
