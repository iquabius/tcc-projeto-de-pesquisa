* Fundamentação Teórica

** Teoria da Computação

   O fenômeno da computação na qual a Ciência da Computação é fundada tem suas
   raízes na teoria da computabilidade que estuda os formalismos na qual pode-se
   expressar algorítimos e seus limites (Gabbrielli, 2010).

   #+ATTR_LATEX: :options [font={\normalfont\itshape},style=nextline]
   - Máquina de Turing :: É um modelo matemático de computação que define uma
        máquina, abstrata, que manipula simbolos em uma tira de fita de acordo
        com uma tabela de regras;
   - Cálculo Lambda :: “Sistema formal que estuda funções recursivas
                       computáveis, no que se refere a teoria da
                       computabilidade”;
   - Tese de Church-Turing :: “Hipótese sobre a natureza de dispositivos
        mecânicos de cálculo, como computadores, e sobre que tipo de algoritmos
        eles podem computar”;
   - Máquina de Turing universal (MTU) :: Concepção de Turing, também conhecido
        como ‘computador com programa armazenado’ (que coloca a ‘tabela de ação’
        --- instruções para a máquina --- na mesma ‘memória’ que os dados de
        entrada) influenciou fortemente /John von Neumann/ na concepção do
        EDVAC, um dos primeiros computadores;
   - Arquitetura de von Neumman :: Primeira descrição publicada --- no artigo
        /First Draft of a Report on the EDVAC/ (Von Neumman, 1945) --- do
        desenho /(design)/ lógico de um ‘computador com programa armazenado’;


** Linguagens de Programação

*** Construtos linguísticos

    “Considerando a computação de um programa como uma máquina de transformação,
    podemos distinguir dois *estados* primordiais do programa: o *estado
    inicial* — quando nenhuma transformação sobre os dados ainda foi realizada —
    e o *estado final*, após todas as transformações realizadas pelo programa.”
    (Melo, 2003, pg.84)

    “Para programas sequenciais, a computação de um programa é, na realidade,
    uma transformação sucessiva de estados.” (Melo, 2003, pg.84)

    Expressões são mecanismos para a transformação de dados, alguns dados de
    entrada são fornecidos e um resultado obtido a partir da computação deles
    (Melo, 2003, pg.84).

    Comandos atuam sobre o fluxo de controle e estados do programa (Melo, 2003,
    pg.84).

    Segundo Sebesta (2003), os critérios de avaliação da linguagem são:
    /legibilidade/, /capacidade de escrita (writability)/, /confiabilidade/, e
    /custo/.


*** Expressões
    formadas por operadores e operandos, uma expressão é qualquer código que dê
    um valor depois de sua redução (ou avaliação). “em linguagens imperativas a
    redução de uma expressão pode modificar o valor de qualquer variável através
    de \emph{efeitos colaterais}” (gabbrielli, 2010).

    “As expressões são os elementos de transformação de dados em um programa: a
    partir de valores, uma transformação é aplicada e um valor resultado é
    produzido.” (Melo, 2003, pg. 84).

    “\textelp{} quando uma expressão que contém uma aplicação de função [],
    algumas operações internas à função podem acarretar mudanças no estado do
    programa.” (Melo, 2003, pg. 89).

*** Comandos
    Ao contrário das expressões, comandos nem sempre dá um valor ao ser
    avaliado.

    #+ATTR_LATEX: :options [font={\normalfont\itshape},style=nextline]
    - Atribuição :: Valores, variáveis e armazenamento na memória.
    - Comandos de controle explícito :: Comandos que decidem o caminho de
         execução do programa, dentre os vários possíveis:
         1. comandos compostos (blocos /begin...end/, /.../, etc)
         2. comando /goto/;
         3. e outros, como /break/, /continue/, /return/, e exceções (comandos
            mais elaborados para controle de sequência).
    - Comandos Condicionais :: /if...else/, /switch...case/;
    - Comandos Iterativos :: Unbounded (/while/, /do...while/) and bounded
         iteration (/for/, /foreach/, /for...in/);
    - Programação Estruturada :: A rejeição do comando /GOTO/ (Dijkstra, 1968)
         e o surgimento do conceito de /‘paradigmas de programação’/;
    - Recursão :: Na busca por linguagens /turing-equivalentes/, a recursão
                  pode ser pensada como uma alternativa aos comandos de
                  iteração.


*** O declarativo e o imperativo nas linguagens de programação
    “[...] ideia de estado de um programa e a computação de um programa como
    sucessivas transformações de estados.” (Melo, 2003)

    Melo (2003) apresenta uma tipologia das linguagens de programação:

    #+ATTR_LATEX: :options [noitemsep,font={\normalfont\itshape}]
    - assertivas
      #+ATTR_LATEX: :options [noitemsep,font={\normalfont\itshape}]
      - imperativas :: C, Pascal, Fortran
      - orientadas a objetos :: C++, Smalltalk
    #+ATTR_LATEX: :options [noitemsep]
    - declarativas
      #+ATTR_LATEX: :options [noitemsep,font={\normalfont\itshape}]
      - funcionais :: LISP, ML, Miranda, Haskell
      - lógicas :: PROLOG, Godel
      - orientadas a satisfações de restrições :: Mozart/OZ, Alice


    A função src_js[:exports code]{doubleNumbers} no Fragmento de Código
    \ref{code:doubleNumbersImperative} recebe uma lista de números e produz numa
    nova lista onde todos os números são multiplicados por 2. Essa implementação
    utiliza o estilo /imperativo/ de programação.

    #+label: code:doubleNumbersImperative
    #+CAPTION: Dobrando números de uma lista de forma /imperativa/
    #+BEGIN_SRC js
    function doubleNumbers(numbers) {
      const doubled = []
      const l = numbers.length

      for (let i = 0; i < l; i++) {
        doubled.push(numbers[i] * 2)
      }

      return doubled
    }
    #+END_SRC

    #+label: code:doubleNumbersDeclarative
    #+CAPTION: Dobrando números de uma lista de forma /declarativa/
    #+BEGIN_SRC js
    function doubleNumbers(numbers) {
      return numbers.map(n => n * 2)
    }

    doubleNumbers([1, 2, 3])
    // [2, 4, 6]
    #+END_SRC


** Paradigmas de Programação
   Melo (2003, pg. 10) fala sobre as diferentes formas de solucionar problemas.
   Os elementos a serem representados, e os mecanismos que as linguagens devem
   prover para permitir a representação e a manipulação naturais dos elementos
   básicos.

   #+BEGIN_EXPORT latex
   \begin{citacao}
     Linguagens de programação orientadas a objetos podem ser vistas como
     ferramentas para construir soluções de problemas orientadas \emph{por}
     objetos, linguagens imperativas podem ser vistas como ferramentas para
     construir soluções de problemas orientadas \emph{por} dados, e linguagens
     declarativas podem ser vistas como ferramentas para construir soluções de
     problemas orientadas \emph{por} relações entre declarações. (pg. 10)
   \end{citacao}
   #+END_EXPORT

*** Programação Estruturada

*** Programação Procedural

*** Programação Orientada a Objetos

*** Programação Orientada a Eventos
   - Design Patterns :: /Observer Pattern/
   - /Callbacks/ ::

*** Programação Funcional
    #+BEGIN_EXPORT latex
    \enquote{A base do $\lambda$-cálculo é o conceito de avaliação de funções
      matemáticas, sendo esse o fundamento essencial da \emph{programação
        funcional.}} (Melo, 2003, pg. 130).
    #+END_EXPORT

    “Esse processo se dá por meio de transformações sucessivas do programa, que
    devem convergir para o resultado desejado. Essas transformações recebem o
    nome de /reduções/.” (Melo, 2003, pg. 130).

    “A execução de um programa funcional consiste na aplicação exaustiva das
    regras de redução.” (Melo, 2003, pg. 133).

    #+ATTR_LATEX: :options [font={\normalfont\itshape},style=nextline]
    - Cálculo lambda não tipado :: Inspiração original, em particular do /Lisp/,
         umas das primeiras linguagens a ter suporte para programação funcional;
    - Programação declarativa ::
    - Expressões :: (1) Variáveis imutáveis (variáveis vinculadas a expressões,
                    que mantém um único valor durante todo o tempo de vida
                    útil). (2) Expressões puras e efeitos colaterais na redução
                    de expressões;
    - Funções :: (1) PF é baseada na aplicação de funções. (2) Faz amplo uso de
                 expressões /lambda/ (funções anônimas). (3) Também desencoraja
                 o uso de funções impuras (que contém efeitos colaterais);
    - Funções de primeira classe :: /first-class functions/
    - Funções de Ordem Superior :: /(Higher-order Functions)/, Funções como
         argumentos, Funções como valores retornados;
    - Composição de funções :: Combinação de funções;
    - Aplicação Parcial de Funções :: /Currying/
    - Primitivas Básicas de PF :: /map/, /filter/, /fold/, /reduce/, /scan/, e
         /zip/;

**** Notes                                                         :noexport:
     "Functional Programming (enabled by lambdas with closure)".

     Contextualização Histórica.

     Renascença da Programação Funcional.

     - [[  % https://www.youtube.com/watch?v=qJgff2spvzM&t=666s][Composition - Nik Graf at ReactEurope2017]]
     - [[https://www.youtube.com/watch?v=yYze0gCBtvY&t=45s][Functional && Reactive - Preethi at ReactEurope2017]]
       - imutability enables /referencial transparency/

***** Leitura Recomendada                                          :noexport:
****** Melo, 2004, pg. 141
       “Os aspectos teóricos da programação funcional, principalmente relativos
       ao $\lambda$-cálculo, são apresentados de forma resumida em [10]. Uma
       representação bastante mais extensa pode ser encontrada em [9]. Em [28]
       encontramos outra exposição dos fundamentos de processos computacionais
       com base no $\lambda$-cálculo.”

       “Em [44] encontramos uma apresentação mais ‘leve’ da programação
       funcional, que exige menos maturidade matemática do leitor.”

       - [9] H.P. BARENDREGT. /The Lambda Calculus, its Syntax e Semantics/.
         North-Holle, 1984.
       - [10] H.P. BARENDREGT. Functional programming e lambda calculus.
         Elsevier, 1990.
       - [28] J.C. MITCHEL. Foundations of Programming Languages, MIT
         Press, 1996.
       - [44] D.A. WATT. Programming Language Concepts e Paradigms. 1990.

*** Programação Reativa

*** Programação Funcional Reativa

    Em relação a evolução das metodologias de desenvolvimento, Melo (2003)
    comenta:

    #+BEGIN_EXPORT latex
    \begin{citacao}
      Novos elementos são permanentemente incorporados às linguagens visando suprir
      as características emergentes dessas metodologias de desenvolvimento, e/ou
      novas formas de implementação de elementos das linguagens surgem junto com as
      mudanças nas metodologias. (pg. 10)
    \end{citacao}
   #+END_EXPORT

    #+ATTR_LATEX: :options [font={\normalfont\itshape},style=nextline]
    - As 10 Primitivas Básicas :: /map/, /merge/, /hold/, /snapshot/, /filter/,
         /lift/, /never/, /constant/, /sample/, /switch/;
    - Combinação de Primitivas ::
    - Arcabouços /(Frameworks)/ :: /Rx.JS/, /Bacon.js/.

**** Notes                                                         :noexport:
     % "FRP permits the modeling of systems that must respond to input over time in a
     % simple and declarative manner." ~ Amsden (2011), Survey on FRP

     % "A program in an FRP language generally corresponds quite closely to a
     % mathematical model of the system being implemented." ~ Amsden (2011), Survey
     % on FRP
     %   - Programação Reativa
     %     - “[…] is programming with asynchronous data streams” – André Staltz
     %   - merge, replay, retry, skip, start, startWith

     % Ferramentas
     %   Bibliotecas & Frameworks
     %   Bacon.js
     %   Cycle.js → Model-View-Intent
     %   Elm → Model-Update-View
     %   Rx
     %   Meteor


** Interfaces Gráficas do Usuário (GUIs)

*** Programação de GUIs

*** Aplicações Desktop
    - utilizam toolkits

*** Aplicações Web
    - JavaScript
    - DOM /(Document Object Model)/
    - Programação com /Callbacks/
