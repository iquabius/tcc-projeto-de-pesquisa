# -*- ispell-local-dictionary: "portugues"; -*-
* Justificativa
  Interfaces gráficas mediam a maioria das nossas interações com computadores,
  seja através de /laptops/, tabletes, ou navegadores web. Desde o projeto até a
  implementação elas apresentam muitos desafios cite:myers1994. Além de
  problemas comuns de programação, como análise e processamento de dados,
  destacam-se também a apresentação de dados na tela e o gerenciamento de
  interações. Na programação de interfaces, para gerenciar interações é
  necessário coordenar vários eventos desencadeados pelo usuário — através de
  dispositivos de interação como teclado, mouse, ou tela multitoque.

  # explicar 'estado' junto com o 'callback hell'?
  Para coordenar eventos é comum usar o /callback/: um bloco de código executado
  sempre que um dado evento ocorrer, p. ex., clique em um botão. Esse conceito é
  criticado por tornar o programa complexo: sua ordem de execução é
  imprevisível, é definida por eventos externos, e não pela sequência
  especificada pelo programador[fn:control_flow]
  cite:maier2010,edwards2009,fischer2007. “Coordenar alterações ao estado
  compartilhada em meio a esse caos pode ser desconcertante, e está longe de ser
  modular. A definição coloquial é /Inferno de Callbacks/.”[fn:callback_hell]
  \cite[p. 2; tradução nossa]{edwards2009}. Para esclarecer os desafios
  enfrentados por sistemas de software em produção, podemos citar uma análise
  das aplicações /desktop/ da Adobe, de 2005, onde foi concluído que a lógica de
  coordenação de eventos consistia de um terço do código, além de conter metade
  dos /bugs/ reportados durante o ciclo de vida do produto cite:jarvi2008.

  Uma alternativa é a /programação reativa (PR)/, um paradigma proposto como
  solução apropriada para sistemas orientados a eventos, como interfaces
  gráficas, jogos digitais, robôs, e servidores web
  cite:salvaneschi2015,bainomugisha2013. Com PR um programa é descrito como um
  fluxo de dados, representado por um grafo de dependências pelo modelo de
  execução, que mantém os dados atualizados automaticamente. Esse comportamento
  pode ser observado em aplicações de planilha eletrônica, como /Google Sheets/
  e /Microsoft Excel/[fn:spreadsheet] cite:blackheath2016,bainomugisha2013. Um
  experimento controlado realizado na Alemanha investigou a compreensibilidade
  de programação entre a PR e o /Observer Pattern/[fn:observer_pattern]. Apesar
  da baixa significância estatística, resultados empíricos confirmaram que a PR
  é mais simples para compreensão de programas em comparação a abordagem
  tradicional cite:salvaneschi2014.

  # automaticamente mantém os dados atualizados, além de garantir a ordem
  # correta de execução[fn:spreadsheet] cite:blackheath2016,bainomugisha2013.

  PR é baseada no estilo declarativo e, de fato, compartilha vários conceitos
  com o paradigma de /programação funcional/ (PF). Já os /callbacks/ são comuns no
  paradigma imperativo, sobretudo com /programação orientada a objetos/
  (POO) através de alguma variação do /Observer Pattern/
  cite:blackheath2016,maier2010. Visto que POO permeia o ensino de programação
  cite:vanroy2003, e que a utilização inadequada de conceitos imperativos é uma das
  principais causas de complexidade em sistemas modernos[fn:complexity]
  cite:moseley2006, indaga-se se a programação declarativa pode mitigar problemas
  enfrentados no desenvolvimento de software em larga escala. Posto isso,
  propomos estudar conceitos de PF e PR aplicados na programação de interfaces
  gráficas.
  # adicionar uma frase/parágrafo (3linhas) sobre os possíveis resultados

  # Sanson questionou isso no fim da apresentação

  # importâncias teóricas
  # trabalhos de grande interesse acadêmico…
  # demonstrar conceitos para fins práticos

  # descrever utilidade academica

  # descrever utilidade social, econômica

  # possível relação com trabalhos referenciados

  # relevância intelectual e prática do assunto investigado à experiência do
  # investigador

  # relevância do trabalho do ponto de vista pessoal, acadêmico, profissional e
  # social.

* Footnotes

[fn:complexity] \citeauthoronline{moseley2006} (citeyear:moseley2006) distinguem
complexidade /acidental/ e /essencial/, aqui nos referimos à primeira.

[fn:control_flow] A ordem de execução de um programa também é denominada /fluxo
de controle/.

[fn:spreadsheet] “Possivelmente a linguagem de programação mais utilizada por
usuários finais”, como é notado por \citeauthoronline{bainomugisha2013}
(citeyear:bainomugisha2013; p. 2).

[fn:imperative] Pela semelhança com a qual se expressa comandos usando o modo
  imperativo de linguagens naturais: p. ex, ‘ande devagar’, ‘faça silêncio’, e
  ‘espera 1 minuto’.

[fn:callback_hell] Tradução literal do inglês /‘Callback Hell’/: expressão
 popular na comunidade de programação.

[fn:observer_pattern] O /Observer Pattern/ é usado para coordenar eventos em
linguagens orientadas a objetos, e /callback/ as vezes é chamado de /event
handler/, /event listener/ ou /observer/, mas em essência o conceito é o mesmo.

[fn:reactive] Para manter interação contínua com o ambiente externo, GUIs precisam
  reagir a vários eventos, como cliques do mouse ou pressionamento de teclas.
  Tais eventos são processados para executar uma tarefa correspondente, como
  atualizar o estado interno da aplicação ou exibir dados na tela. Devido a
  essas propriedades, uma GUI é considerada um sistema /reativo/ ou /orientado a
  eventos./

